###======== Documentation ========###
# Learn more here: https://www.notion.so/GitHub-Automated-Linting-Deployment-9c1be78b9350431bb9230cc821608dd4?pvs=4
# View templates here: https://github.com/builtmighty/.github/tree/main/workflow_templates

##====== Steps ======##
# 1. Checks out the code.
# 2. Sets up deployment keys.
# 3. Checks for uncommitted code.
# 4. Captures uncommitted code, in the form of a patch.
# 5. Applies the patch to a hotfix branch.
# 6. Checks if the hotfix branch was created.
# 7. Updates production to hotfix branch.
# 8. Deploys code, if no uncommitted code was found.
# 9. Slack notifications.
# 10. Run final job status check.

name: ðŸš€ Production Deployment
env:
  DEFAULT_BRANCH: ${{ github.repository.default_branch }}

# Controls when the workflow will run
on:
  # Triggers the workflow deployment on release publishing.
  release:
    types:
      - published
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Workflow jobs.
jobs:
  # Workflow job of code-check-prod.
  deploy-prod:
    # Only run the job if the PR is closed AND the PR is merged.
    if: ${{ github.event_name == 'release' && github.event.action == 'published' && !contains(github.head_ref, 'skipdeploy') && vars.SKIP_PROD_DEPLOY != 'true' }}
    # Runner to run
    runs-on: [Large-Runner-Ubuntu]
    permissions:
      contents: write
      packages: read
      statuses: write
      pull-requests: write
      issues: write
      deployments: write

    # Steps for the workflow.
    steps:
      ## 1. Checks out the code.
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Start a deployment.
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub Deployment
        id: github_deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.PRODUCTION_URL }}
          environment: production

      # Get the last merged branch.
      - name: Get Last Merged
        id: last-merged
        run: |
          # Get the current release branch name
          RELEASE_BRANCH=${{ github.event.release.target_commitish }}
          
          # Find the last merge commit on the release branch
          LAST_MERGE=$(git log --merges --oneline -1 $RELEASE_BRANCH | awk '{print $1}')
          
          # Determine the branch merged in the last merge commit
          LAST_BRANCH=$(git name-rev --name-only $LAST_MERGE | cut -d/ -f2-)
          
          echo "Last merge commit: $LAST_MERGE"
          echo "Last branch merged: $LAST_BRANCH"
          
          # Set the output for use in later steps
          echo "branch=$LAST_BRANCH" >> $GITHUB_ENV

      ## 2. Sets up deployment keys.
      # Setup Deployment SSH Key
      - name: Setup Deployment SSH Key
        if: ${{ vars.WPENGINE_DEPLOY != 'true' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.BOT_SIGNING_KEY }}" > ~/.ssh/bot
          touch ~/.ssh/config
          echo "Host *
          AddKeysToAgent yes
          IgnoreUnknown UseKeychain
          UseKeychain yes
          IdentityFile ~/.ssh/bot" > ~/.ssh/config
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/bot

      ## 3. Checks for uncommitted code.
      - name: Check for Uncommitted Code on Production
        if: ${{ vars.WPENGINE_DEPLOY != 'true' }}
        continue-on-error: true
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no -p${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "cd ${{ secrets.PROD_REMOTE_WEB_ROOT }} && git status -s" > ~/.ssh/git-status.txt
          if [[ -s ~/.ssh/git-status.txt ]]; then
            exit 1
          fi
        id: check_uncommitted

      ## 4. Captures uncommitted code, in the form of a patch.
      - name: Capture Uncommitted Code
        continue-on-error: true
        if: ${{ steps.check_uncommitted.outcome == 'failure' && vars.WPENGINE_DEPLOY != 'true' }}
        run: |
          # Connect and create the patch.
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
            cd ${{ secrets.PROD_REMOTE_WEB_ROOT }}
            # Stash and capture uncommitted code in a patch.
            git stash
            git stash show -p > uncommitted_changes.patch
            git stash apply
            # Get the current commit hash
            git rev-parse HEAD > commit_hash.txt
          "
          # Download patch and commit hash.
          scp -i ~/.ssh/id_rsa -P ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:${{ secrets.PROD_REMOTE_WEB_ROOT }}/uncommitted_changes.patch .
          scp -i ~/.ssh/id_rsa -P ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:${{ secrets.PROD_REMOTE_WEB_ROOT }}/commit_hash.txt .
          # Delete the patch file and commit hash from remote.
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
            cd ${{ secrets.PROD_REMOTE_WEB_ROOT }}
            rm -rf uncommitted_changes.patch && rm -rf commit_hash.txt
          "
          if [[ ! -s uncommitted_changes.patch ]]; then
            # SSH back in and get Git version.
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
              git --version
            "
            exit 1
          fi
        id: capture_uncommitted

      ## 5. Applies the patch to a hotfix branch.
      - name: Apply Uncommitted Patch and Commit
        continue-on-error: true
        if: ${{ steps.check_uncommitted.outcome == 'failure' && steps.capture_uncommitted.outcome == 'success' && vars.WPENGINE_DEPLOY != 'true' }}
        env:
          UNCOMMITTED_BRANCH: hotfix/production/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}
        run: |
          # Capture commit hash.
          COMMIT_HASH=$(cat commit_hash.txt)
          # Checkout current live commit.
          git pull origin $COMMIT_HASH
          git checkout $COMMIT_HASH
          # Apply the patch.
          git apply uncommitted_changes.patch
          # Setup Git signing.
          git config core.filemode false && sudo chown -R $(whoami) . && chown -R $(whoami) .
          git config --global gpg.format ssh
          git config --global user.signingkey ~/.ssh/bot
          git config --global commit.gpgsign true
          git config user.name "builtmightybot"
          git config user.email "bot@builtmighty.com"
          # Clean up.
          rm -rf uncommitted_changes.patch
          # Create uncommitted branch.
          git checkout -b ${{ env.UNCOMMITTED_BRANCH }}
          git push origin ${{ env.UNCOMMITTED_BRANCH }}
          # Commit uncommitted code.
          git add .
          git commit -S -m "ðŸš¨ Captured ALL Uncommitted Code on Production"
          git push origin ${{ env.UNCOMMITTED_BRANCH }}

      ## 6. Checks if the hotfix branch was created.
      - name: Check Hotfix Branch Exists
        continue-on-error: true
        if: ${{ steps.check_uncommitted.outcome == 'failure' && steps.capture_uncommitted.outcome == 'success' && vars.WPENGINE_DEPLOY != 'true' }}
        run: |
          git fetch --all
          git branch -r | grep hotfix/production/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
        id: check_hotfix

      ## 7. Updates production to hotfix branch.
      - name: Pull Hotfix Branch to Production
        continue-on-error: true
        if: ${{ steps.check_uncommitted.outcome == 'failure' && steps.capture_uncommitted.outcome == 'success' && steps.check_hotfix.outcome == 'success' && vars.WPENGINE_DEPLOY != 'true' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_PAT: ${{ secrets.DEPLOY_WORKFLOW_PAT }}
          GIT_REPO_URL: github.com/${{ github.repository }}
          UNCOMMITTED_BRANCH: hotfix/production/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no -p${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
            cd ${{ secrets.PROD_REMOTE_WEB_ROOT }}
            git reset --hard
            git clean -fd
            git checkout -b ${{ env.UNCOMMITTED_BRANCH }}
            git pull https://${{ vars.DEPLOY_USER }}:${{ env.DEPLOY_PAT }}@${{ env.GIT_REPO_URL }} ${{ env.UNCOMMITTED_BRANCH }}
          "

      ## 8. Deploys code, if no uncommitted code was found.
      - name: Deploy to Production
        continue-on-error: true
        if: ${{ steps.check_uncommitted.outcome == 'success' && vars.WPENGINE_DEPLOY != 'true' }}
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_PAT: ${{ secrets.DEPLOY_WORKFLOW_PAT }}
          GIT_REPO_URL: github.com/${{ github.repository }}
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no -p${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
            cd ${{ secrets.PROD_REMOTE_WEB_ROOT }}
            git checkout ${{ env.DEFAULT_BRANCH }}
            git reset --hard
            git clean -fd
            git pull https://${{ vars.DEPLOY_USER }}:${{ env.DEPLOY_PAT }}@${{ env.GIT_REPO_URL }} ${{ env.DEFAULT_BRANCH }}
          "
        id: deploy_prod

      # WP Engine Deploy.
      - name: Deploy to WP Engine Production
        continue-on-error: true
        uses: wpengine/github-action-wpe-site-deploy@v3
        if: ${{ vars.WPENGINE_DEPLOY == 'true' }}
        with:
          WPE_SSHG_KEY_PRIVATE: ${{ secrets.WPE_SSH_KEY }} 
          WPE_ENV: ${{ vars.WPE_PROD }}
        id: deploy_wpe

      # Platform deploy.
      - name: Platform Scripts
        continue-on-error: true
        if: ${{ steps.deploy_prod.outcome == 'success' && ( vars.PLATFORM == 'laravel' || vars.PLATFORM == 'wordpress' ) && vars.WPENGINE_DEPLOY != 'true' }}
        run: |
          if [ -z "${{ vars.BUILDSCRIPTS }}" ]; then
            echo "Nothing to do here."
          else
            if [ ${{ vars.PLATFORM }} = "laravel" ]; then
              ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
                cd ${{ secrets.PROD_REMOTE_WEB_ROOT }}
                ${{ vars.BUILDSCRIPTS }}
                php artisan optimize:clear
              "
            else
              ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
                cd ${{ secrets.PROD_REMOTE_WEB_ROOT }}
                ${{ vars.BUILDSCRIPTS }}
              "
            fi
          fi
        id: platform_scripts

      # Delete using last merged branch.
      - name: Delete Last Merged Branch
        if: ${{ steps.check_uncommitted.outcome == 'success' && steps.deploy_prod.outcome == 'success' }}
        run: |
          git push origin --delete ${{ steps.last-merged.outputs.branch }}

      # Deploy Success Status.
      - name: Successful GitHub Deployment
        if: ${{ steps.deploy_prod.outcome == 'success' || steps.deploy_wpe.outcome == 'success' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.github_deployment.outputs.environment_url }}
          deployment-id: ${{ steps.github_deployment.outputs.deployment_id }}
          state: 'success'

      # Deploy Failure Status.
      - name: Failed GitHub Deployment
        if: ${{ steps.check_uncommitted.outcome == 'failure' || steps.deploy_prod.outcome == 'failure' || steps.deploy_wpe.outcome == 'failure' }}
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.github_deployment.outputs.environment_url }}
          deployment-id: ${{ steps.github_deployment.outputs.deployment_id }}
          state: 'failure'

      ## 9. Slack notifications.
      # Post uncommitted branch to Slack channel.
      - name: Slack Uncommitted Branch Notification
        id: slack_uncommitted
        if: ${{ steps.check_uncommitted.outcome == 'failure' && steps.check_hotfix.outcome == 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text":"ðŸš© Uncommitted Code on Production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*ðŸš© Uncommitted Code on Production* | Check out the uncommitted code in this new branch and check if it needs to be merged into the default branch."
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "ðŸŒ³ Uncommitted Code Branch",
                      "emoji": true
                    },
                    "value": "click_me_123",
                    "url": "${{ env.GIT_REPO_URL }}/tree/${{env.UNCOMMITTED_BRANCH}}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          UNCOMMITTED_BRANCH: hotfix/production/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}

      # Post uncommitted changes to Slack channel.
      - name: Slack Uncommitted Changes Notification
        id: slack_uncommitted_changes
        if: ${{ steps.check_uncommitted.outcome == 'failure' && steps.check_hotfix.outcome == 'failure' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text":"ðŸš© Uncommitted Code on Production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*ðŸš© Uncommitted Code on Production* | We were unable to grab it though. Find out what to do."
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "ðŸ““ Read Documentation",
                      "emoji": true
                    },
                    "value": "click_me_123",
                    "url": "${{ vars.UNCOMMITTED_FAIL_DOCS }}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          UNCOMMITTED_BRANCH: hotfix/production/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}

      # Slack deployment failure notification.
      - name: Slack Failure Notification
        id: slack_failure_long
        if: ${{ steps.deploy_prod.outcome == 'failure' || steps.deploy_wpe.outcome == 'failure' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text":"ðŸ¤¯ Failed Production Deployment",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*ðŸ¤¯ Failed Production Deployment* | Looks like something went wrong with the deployment. The @lead-dev-team will have to take a look."
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}

      # Slack deployment success notification.
      - name: Slack Success Notification
        id: slack_success
        if: ${{ steps.deploy_prod.outcome == 'success' || steps.deploy_wpe.outcome == 'success' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text":"ðŸš€ Production Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*ðŸš€ Production Deployment Successful* | We had a successful deployment to production from ${{ github.triggering_actor }}!"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "ðŸ”— View Production",
                      "emoji": true
                    },
                    "value": "click_me_123",
                    "url": "${{ vars.PRODUCTION_URL }}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}

      ## 10. Run final job status check.
      # Check if the job failed or succeeded.
      - name: Final Job Status Check
        if: ${{ steps.check_uncommitted.outcome == 'failure' || steps.deploy_prod.outcome == 'failure' || steps.deploy_wpe.outcome == 'failure' }}
        run: |
          echo "Job failed. Please check the logs for more information."
          exit 1
