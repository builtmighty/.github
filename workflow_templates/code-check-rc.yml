# ======= Expected GH Actions Secrets & Vars =======
## Org Secrets - Set in Org Github Settings
# - SLACK_BOT_API_KEY
# - SLACK_TEAM_ID
# - SSH_PRIVATE_KEY
# - BOT_SIGNING_KEY
## Repo Secrets - MUST be set per Repo in Github Repo Settings
# - PROD_REMOTE_WEB_ROOT
# - PROD_SSH_HOST
# - PROD_SSH_PORT
# - PROD_SSH_USER
# - RC_REMOTE_WEB_ROOT
# - RC_SSH_HOST
# - RC_SSH_PORT
# - RC_SSH_USER
# - SLACK_CHANNEL_ID

name: 🧑‍💻 Release Candidate Code Validation
env:
  DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  _LINTER_RULES_DIR: .github/linters

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the default branch
  # push:
  #   branches: $default-branch
  pull_request:
    branches: 
      - 'rc/*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  code-check-stage:
    # The type of runner that the job will run on
    runs-on: [Large-Runner-Ubuntu]

    permissions:
      contents: write
      packages: read
      statuses: write
      pull-requests: write
      issues: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      ## Configuring Super Linter

      # Create tmp Directory for Linter Config Files and Git Checks
      - name: Create tmp Directory for Config Files and Git Checks
        run: |
          mkdir -p ${{ env._LINTER_RULES_DIR }}

      # Setup Config Files for stylelint (CSS,SASS,LESS)
      # You can override these rules by setting a repo level variable labelled STYLELINTRC.
      - name: 'Create StyleLint Config File'
        run: |
            echo '${{ vars.STYLELINTRC }}' > ${{ env._LINTER_RULES_DIR }}/.stylelintrc.json

      # Create stylelint ignore file
      - name: Create StyleLint Ignore File
        run: |
            echo '${{ vars.STYLELINTIGNORE }}' > .stylelintignore

      # Setup Config File for GH Action Linter
      - name: Create ActionLint Config File
        run: |
            echo 'self-hosted-runner:
              # Labels of self-hosted runner in array of string
              labels:
                - Large-Runner-Ubuntu
            ' > ${{ env._LINTER_RULES_DIR }}/actionlint.yaml

      # Only Check for JS Fatal Syntax Errors, Remove Step or add rules to lint JS Code Styling/Structure
      # You can override these rules by setting a repo level variable labelled ESLINTRC.
      - name: Create ESLint Config File
        run: |
          echo '${{ vars.ESLINTRC }}' > ${{ env._LINTER_RULES_DIR }}/.eslintrc.json

      # Create ESLint ignore file
      - name: Create ESLint Ignore File
        run: |
            echo '${{ vars.ESLINTIGNORE }}' > .eslintignore

      # Run Super Linter ( Lints: PHP, CSS, JSON, GH Actions, JS, HTML)
      - name: Run Super Linter
        id: super-linter
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_WORKSPACE: "./wp-content/"
          LINTER_RULES_PATH: ${{ env._LINTER_RULES_DIR }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_CSS: true
          CSS_FILE_NAME: .stylelintrc.json
          JAVASCRIPT_ES_CONFIG_FILE: .eslintrc.json
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_PHP: true
          VALIDATE_PHP_BUILTIN: true
          VALIDATE_GITHUB_ACTIONS: true
          LOG_LEVEL: ERROR
          CREATE_LOG_FILE: true
          LOG_FILE: super-linter.log
          IGNORE_GENERATED_FILES: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IGNORE_GITIGNORED_FILES: true
          FILTER_REGEX_EXCLUDE: "${{ vars.FILTER_REGEX_EXCLUDE }}"
          GITHUB_ACTIONS_COMMAND_ARGS: -shellcheck= -pyflakes=
          # DEFAULT_BRANCH: main
          # Turn off PHP_CodeSniffer, we only want to return FATAL errors and not code styling, uncomment for strict code structure checks
          # VALIDATE_PHP_PHPCS: true
          # Use ESLint instead so we can have tighter controls on Linting, Uncomment VALIDATE_JAVASCRIPT_STANDARD to enable default Standard JS Linting
          # VALIDATE_JAVASCRIPT_STANDARD: true

      ## On failure, let us know what happened.

      # Write errors to workflow job summary
      - name: Write Errors to Workflow Summary
        if: failure()
        run: |
          echo "# 💩 Code Linting Failed" >> $GITHUB_STEP_SUMMARY
          echo $GITHUB_STEP_SUMMARY

      # Replace color codes with markdown styles.
      - name: Replace Color Codes in Errors
        if: failure()
        run: |
          sed -i 's/\x1B\[[0-9;]*[JKmsu]//g' super-linter.log  # Remove ANSI color codes
          sed -i 's/\[ERROR\]/[ERROR]/g' super-linter.log  # Replace [ERROR] with red
          sed -i 's/\[WARNING\]/[WARNING]/g' super-linter.log  # Replace [WARNING] with yellow
      
      # Write errors to workflow job summary.
      - name: Display Linting Errors
        if: failure()
        run: |
          # This command will print the linting errors and warnings to the GitHub Actions workflow summary
          echo 'You cannot merge until these issues are resolved.' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat super-linter.log | grep -E '\[ERROR\]|\[WARNING\]|PHP (Parse|Fatal) error:' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Write errors to Slack channel.
      - name: Post Linting Errors to Slack channel
        id: slack_failed
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # Write errors.
          payload: |
            {
              "text": "💩 Code Linting Failed. You cannot merge until these issues are resolved. View Pull Request: ${{ github.event.pull_request.html_url }}",
            	"blocks": [
            		{
            			"type": "divider"
            		},
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "🚩 Code Linting Failed 💩",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "You cannot merge into the *release candidate* until issues are resolved."
            			}
            		},
            		{
            			"type": "image",
            			"image_url": "https://i.giphy.com/media/uprwwjptZW4Za/giphy.webp",
            			"alt_text": "inspiration"
            		},
            		{
            			"type": "actions",
            			"elements": [
            				{
            					"type": "button",
            					"text": {
            						"type": "plain_text",
            						"text": "View Pull Request",
            						"emoji": true
            					},
            					"value": "click_me_123",
            					"url": "${{ github.event.pull_request.html_url || github.event.repository.html_url }}",
            					"action_id": "actionId-0"
            				}
            			]
            		}
            	]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          GIT_REPO_URL: https://github.com/${{ github.repository }}

      ## On success, let us know what happened.

      # Write success message to workflow job summary
      - name: Write Success Message to Workflow Summary
        if: success()
        run: |
          echo "# 🎉 Code Successfully Checked" >> $GITHUB_STEP_SUMMARY
          echo "You are now clear to merge into the release candidate, which will trigger a deployment to staging." >> $GITHUB_STEP_SUMMARY
          echo $GITHUB_STEP_SUMMARY

      # Write success message to Slack channel.
      - name: Post Success to Slack channel
        id: slack_success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # Write errors.
          payload: |
            {
              "text": "✅ Success! You can now merge into the release candidate. View Pull Request: ${{ github.event.pull_request.html_url }}",
            	"blocks": [
            		{
            			"type": "divider"
            		},
            		{
            			"type": "header",
            			"text": {
            				"type": "plain_text",
            				"text": "✅ Success! Time to Merge! 🔀",
            				"emoji": true
            			}
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "You're ready to merge into the *release candidate*. Yay!"
            			}
            		},
            		{
            			"type": "image",
            			"image_url": "https://i.giphy.com/media/3ofSBnyj5NUxiI5eda/200.webp",
            			"alt_text": "inspiration"
            		},
            		{
            			"type": "actions",
            			"elements": [
            				{
            					"type": "button",
            					"text": {
            						"type": "plain_text",
            						"text": "View Pull Request",
            						"emoji": true
            					},
            					"value": "click_me_123",
            					"url": "${{ github.event.pull_request.html_url || github.event.repository.html_url }}",
            					"action_id": "actionId-0"
            				}
            			]
            		}
            	]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          GIT_REPO_URL: https://github.com/${{ github.repository }}
