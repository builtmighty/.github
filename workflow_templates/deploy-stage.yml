###======== Documentation ========###
# Learn more here: https://www.notion.so/GitHub-Automated-Linting-Deployment-9c1be78b9350431bb9230cc821608dd4?pvs=4
# View templates here: https://github.com/builtmighty/.github/tree/main/workflow_templates

##====== Steps ======##
# 1. Checks out the code.
# 2. Sets up deployment keys.
# 3. Checks for uncommitted code.
# 4. Captures uncommitted code, in the form of a patch.
# 5. Applies the patch to a hotfix branch.
# 6. Checks if the hotfix branch was created.
# 7. Updates staging to hotfix branch.
# 8. Deploys code, if no uncommitted code was found.
# 9. Slack notifications.
# 10. Run final job status check.

name: 🔨 Staging Deployment
env:
  DEFAULT_BRANCH: ${{ github.event.pull_request.base.ref }}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the default branch
  pull_request:
    branches:
      - rc/*
    types:
      - closed
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Workflow jobs.
jobs:
  # Workflow job of code-check-prod.
  deploy-stage:
    # Only run the job if the PR is closed AND the PR is merged.
    if: github.event.pull_request.merged == true && !contains(github.head_ref, 'skipdeploy') && vars.SKIP_STAGE_DEPLOY != 'true'
    # Runner to run
    runs-on: [Large-Runner-Ubuntu]
    permissions:
      contents: write
      packages: read
      statuses: write
      pull-requests: write
      issues: write

    # Steps for the workflow.
    steps:
      ## 1. Checks out the code.
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      ## 2. Sets up deployment keys.
      # Setup Deployment SSH Key
      - name: Setup Deployment SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.BOT_SIGNING_KEY }}" > ~/.ssh/bot
          touch ~/.ssh/config
          echo "Host *
          AddKeysToAgent yes
          IgnoreUnknown UseKeychain
          UseKeychain yes
          IdentityFile ~/.ssh/bot" > ~/.ssh/config
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/bot

      ## 3. Checks for uncommitted code.
      - name: Check for Uncommitted Code on Staging
        continue-on-error: true
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no -p${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }} "cd ${{ secrets.RC_REMOTE_WEB_ROOT }} && git status -s" > ~/.ssh/git-status.txt
          if [[ -s ~/.ssh/git-status.txt ]]; then
            exit 1
          fi
        id: check_uncommitted

      ## 4. Captures uncommitted code, in the form of a patch.
      # Tries to capture via git diff, if that fails, tries git stash show -p.
      - name: Capture Uncommitted Code
        continue-on-error: true
        if: steps.check_uncommitted.outcome == 'failure'
        run: |
          # Connect and create the patch.
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }} "
            cd ${{ secrets.RC_REMOTE_WEB_ROOT }}
            git diff > uncommitted_changes.patch
          "
          # Download the patch file.
          scp -i ~/.ssh/id_rsa -P ${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }}:${{ secrets.RC_REMOTE_WEB_ROOT }}/uncommitted_changes.patch .
          # Check if the patch is empty.
          if [[ ! -s uncommitted_changes.patch ]]; then
            # Delete the empty patch file.
            rm -rf uncommitted_changes.patch
            # SSH back in and try git stash show -p for the patch.
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }} "
              cd ${{ secrets.RC_REMOTE_WEB_ROOT }}
              git stash show -p > uncommitted_changes.patch
            "
            # Download the patch file.
            scp -i ~/.ssh/id_rsa -P ${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }}:${{ secrets.RC_REMOTE_WEB_ROOT }}/uncommitted_changes.patch .
          fi
          # Delete the patch file from remote.
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }} "
            cd ${{ secrets.RC_REMOTE_WEB_ROOT }}
            rm -rf uncommitted_changes.patch
          "
          if [[ ! -s uncommitted_changes.patch ]]; then
            # SSH back in and get Git version.
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }} "
              git --version
            "
            exit 1
          fi
        id: capture_uncommitted

      ## 5. Applies the patch to a hotfix branch.
      - name: Apply Uncommitted Patch and Commit
        continue-on-error: true
        if: steps.check_uncommitted.outcome == 'failure' && steps.capture_uncommitted.outcome == 'success'
        env:
          UNCOMMITTED_BRANCH: hotfix/staging/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}
        run: |
          git apply uncommitted_changes.patch
          git config core.filemode false && sudo chown -R $(whoami) . && chown -R $(whoami) .
          git config --global gpg.format ssh
          git config --global user.signingkey ~/.ssh/bot
          git config --global commit.gpgsign true
          git config user.name "builtmightybot"
          git config user.email "bot@builtmighty.com"
          git checkout -b ${{ env.UNCOMMITTED_BRANCH }}
          git push origin ${{ env.UNCOMMITTED_BRANCH }}
          rm -rf uncommitted_changes.patch
          git add .
          git commit -S -m "🚨 Captured ALL Uncommitted Code on Staging"
          git push origin ${{ env.UNCOMMITTED_BRANCH }}

      ## 6. Checks if the hotfix branch was created.
      - name: Check Hotfix Branch Exists
        continue-on-error: true
        if: steps.check_uncommitted.outcome == 'failure' && steps.capture_uncommitted.outcome == 'success'
        run: |
          git fetch --all
          git branch -r | grep hotfix/staging/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
        id: check_hotfix

      ## 7. Updates staging to hotfix branch.
      - name: Pull Hotfix Branch to Staging
        continue-on-error: true
        if: steps.check_uncommitted.outcome == 'failure' && steps.capture_uncommitted.outcome == 'success' && steps.check_hotfix.outcome == 'success'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_PAT: ${{ secrets.DEPLOY_WORKFLOW_PAT }}
          GIT_REPO_URL: github.com/${{ github.repository }}
          UNCOMMITTED_BRANCH: hotfix/staging/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no -p${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }} "
            cd ${{ secrets.RC_REMOTE_WEB_ROOT }}
            git reset --hard
            git checkout -b ${{ env.UNCOMMITTED_BRANCH }}
            git pull https://${{ vars.DEPLOY_USER }}:${{ env.DEPLOY_PAT }}@${{ env.GIT_REPO_URL }} ${{ env.UNCOMMITTED_BRANCH }}
          "

      ## 8. Deploys code, if no uncommitted code was found.
      - name: Deploy to Staging
        continue-on-error: true
        if: steps.check_uncommitted.outcome == 'success'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_PAT: ${{ secrets.DEPLOY_WORKFLOW_PAT }}
          GIT_REPO_URL: github.com/${{ github.repository }}
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no -p${{ secrets.RC_SSH_PORT }} ${{ secrets.RC_SSH_USER }}@${{ secrets.RC_SSH_HOST }} "
            cd ${{ secrets.RC_REMOTE_WEB_ROOT }}
            git checkout ${{ env.DEFAULT_BRANCH }}
            git reset --hard
            git pull https://${{ vars.DEPLOY_USER }}:${{ env.DEPLOY_PAT }}@${{ env.GIT_REPO_URL }} ${{ env.DEFAULT_BRANCH }}
          "
        id: deploy_stage

      ## 9. Slack notifications.
      # Post uncommitted branch to Slack channel - LONG.
      - name: Slack Uncommitted Branch Notification - Long
        id: slack_uncommitted_long
        if: steps.check_uncommitted.outcome == 'failure' && steps.check_hotfix.outcome == 'success' && vars.DEPLOY_FAIL_MESSAGE != 'short' && vars.DEPLOY_FAIL_MESSAGE != 'off'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "*🛑 Deployment Failed*\n============================\nGitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }} \n\n",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_FAIL_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_FAIL_BODY }}"
                  }
                },
                {
                  "type": "image",
                  "image_url": "${{ vars.DEP_RC_FAIL_IMAGE }}",
                  "alt_text": "inspiration"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚩 *Result*: `${{ job.status }}`\n🚀 *Triggered By*: `${{ github.event.pull_request.html_url || github.event.head_commit.url }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`\n🔀 *Un-commmitted Branch*: `<${{ env.GIT_REPO_URL }}/tree/${{env.UNCOMMITTED_BRANCH}}|${{env.UNCOMMITTED_BRANCH}}>`"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          UNCOMMITTED_BRANCH: hotfix/staging/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}

      # Post uncommitted branch to Slack channel - SHORT.
      - name: Slack Uncommitted Branch Notification - Short
        id: slack_uncommitted_short
        if: steps.check_uncommitted.outcome == 'failure' && steps.check_hotfix.outcome == 'success' && vars.DEPLOY_FAIL_MESSAGE == 'short'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "*🛑 Deployment Failed*\n============================\nGitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }} \n\n",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_FAIL_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_FAIL_BODY }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚩 *Result*: `${{ job.status }}`\n🚀 *Triggered By*: `${{ github.event.pull_request.html_url || github.event.head_commit.url }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`\n🔀 *Un-commmitted Branch*: `<${{ env.GIT_REPO_URL }}/tree/${{env.UNCOMMITTED_BRANCH}}|${{env.UNCOMMITTED_BRANCH}}>`"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          UNCOMMITTED_BRANCH: hotfix/staging/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}

      # Post uncommitted changes to Slack channel - LONG.
      - name: Slack Uncommitted Changes Notification - Long
        id: slack_uncommitted_changes_long
        if: steps.check_uncommitted.outcome == 'failure' && steps.check_hotfix.outcome == 'failure' && vars.DEPLOY_FAIL_MESSAGE != 'short' && vars.DEPLOY_FAIL_MESSAGE != 'off'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "*🛑 Deployment Failed*\n============================\nGitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }} \n\n",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_FAIL_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_FAIL_BODY }}"
                  }
                },
                {
                  "type": "image",
                  "image_url": "${{ vars.DEP_RC_FAIL_IMAGE }}",
                  "alt_text": "inspiration"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*WARNING*: There is uncommitted code on staging. We were unable to capture it.\n\n🚩 *Result*: `${{ job.status }}`\n🚀 *Triggered By*: `${{ github.event.pull_request.html_url || github.event.head_commit.url }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`\n"
                  }
                },
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "usergroup",
                          "usergroup_id": "S0568RB4WTT"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          UNCOMMITTED_BRANCH: hotfix/staging/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}

      # Post uncommitted changes to Slack channel - SHORT.
      - name: Slack Uncommitted Branch Notification - Short
        id: slack_uncommitted_changes_short
        if: steps.check_uncommitted.outcome == 'failure' && steps.check_hotfix.outcome == 'failure' && vars.DEPLOY_FAIL_MESSAGE == 'short'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "*🛑 Deployment Failed*\n============================\nGitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }} \n\n",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_FAIL_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_FAIL_BODY }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*WARNING*: There is uncommitted code on staging. We were unable to capture it.\n\n🚩 *Result*: `${{ job.status }}`\n🚀 *Triggered By*: `${{ github.event.pull_request.html_url || github.event.head_commit.url }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`\n🔀 *Un-commmitted Branch*: `<${{ env.GIT_REPO_URL }}/tree/${{env.UNCOMMITTED_BRANCH}}|${{env.UNCOMMITTED_BRANCH}}>`"
                  }
                },
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "usergroup",
                          "usergroup_id": "S0568RB4WTT"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}
          UNCOMMITTED_BRANCH: hotfix/staging/uncommitted-changes_${{github.run_id}}.${{github.run_attempt}}
          GIT_REPO_URL: https://github.com/${{ github.repository }}

      # Slack deployment failure notification - LONG.
      - name: Slack Failure Notification - Long
        id: slack_failure_long
        if: steps.deploy_stage.outcome == 'failure' && vars.DEPLOY_FAIL_MESSAGE != 'short' && vars.DEPLOY_FAIL_MESSAGE != 'off'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "*🛑 Deployment Failed*\n============================\nGitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }} \n\n",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_FAIL_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_FAIL_BODY }}"
                  }
                },
                {
                  "type": "image",
                  "image_url": "${{ vars.DEP_RC_FAIL_IMAGE }}",
                  "alt_text": "inspiration"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*WARNING*: The deployment failed and not because of uncommitted code.\n\n🚩 *Result*: `${{ job.status }}`\n🚀 *Triggered By*: `${{ github.event.pull_request.html_url || github.event.head_commit.url }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`\n🌳 *Uncommmitted Branch*: `<${{ env.GIT_REPO_URL }}/tree/${{env.UNCOMMITTED_BRANCH}}|${{env.UNCOMMITTED_BRANCH}}>`"
                  }
                },
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "usergroup",
                          "usergroup_id": "S0568RB4WTT"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}

      # Slack deployment failure notification - SHORT.
      - name: Slack Failure Notification - Short
        id: slack_failure_short
        if: steps.deploy_stage.outcome == 'failure' && vars.DEPLOY_FAIL_MESSAGE != 'short' && vars.DEPLOY_FAIL_MESSAGE != 'off'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "*🛑 Deployment Failed*\n============================\nGitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }} \n\n",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_FAIL_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_FAIL_BODY }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*WARNING*: The deployment failed and not because of uncommitted code.\n\n🚩 *Result*: `${{ job.status }}`\n🚀 *Triggered By*: `${{ github.event.pull_request.html_url || github.event.head_commit.url }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`\n🌳 *Uncommmitted Branch*: `<${{ env.GIT_REPO_URL }}/tree/${{env.UNCOMMITTED_BRANCH}}|${{env.UNCOMMITTED_BRANCH}}>`"
                  }
                },
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "usergroup",
                          "usergroup_id": "S0568RB4WTT"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}

      # Slack deployment success notification - LONG.
      - name: Slack Success Notification - Long
        id: slack_success_long
        if: steps.deploy_stage.outcome == 'success' && vars.DEPLOY_SUCC_MESSAGE != 'short' && vars.DEPLOY_SUCC_MESSAGE != 'off'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action Build Result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_SUCC_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_SUCC_BODY }}"
                  }
                },
                {
                  "type": "image",
                  "image_url": "${{ vars.DEP_RC_SUCC_IMAGE }}",
                  "alt_text": "inspiration"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *GitHub Action Result*: `${{ job.status }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}

        # Post to Slack channel.
      
      # Slack deployment success notification - SHORT.
      - name: Slack Success Notification - Short
        id: slack_success_short
        if: steps.deploy_stage.outcome == 'success' && vars.DEPLOY_SUCC_MESSAGE == 'short'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action Build Result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "divider"
                },
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ vars.DEP_RC_SUCC_HEAD }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ vars.DEP_RC_SUCC_BODY }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *GitHub Action Result*: `${{ job.status }}`\n🧑‍💻 *User*: `${{ github.triggering_actor }}`"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}

      ## 10. Run final job status check.
      # Check if the job failed or succeeded.
      - name: Final Job Status Check
        if: steps.check_uncommitted.outcome == 'failure' || steps.deploy_stage.outcome == 'failure'
        run: |
          echo "Job failed. Please check the logs for more information."
          exit 1
