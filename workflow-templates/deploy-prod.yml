

name: Deploy to Production

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    tags: v*
  pull_request:
    branches: [master, main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy-production:
    # The type of runner that the job will run on
    runs-on: [Large-Runner-Ubuntu]

    permissions:
      contents: read
      packages: read
      statuses: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup Config Files for Super Linter
      - name: 'Create .stylelintrc config file'
        run: |
            echo '{
              "extends": "stylelint-config-recommended-scss",
              "rules": {
                'no-descending-specificity': null
              },
              "defaultSeverity": "error",
              "ignoreFiles": [
                "**/node_modules/**",
                "**/dist/**",
                "**/build/**",
                "**/vendor/**",
                "**/wp-admin/**",
                "**/wp-includes/**",
                "**/wp-content/themes/twenty*"
              ],
              "maxWarnings": 0
            }' > ./.stylelintrc

      - name: Create .actionlint config file
        run: |
            echo 'self-hosted-runner:
              # Labels of self-hosted runner in array of string
              labels:
                - Large-Runner-Ubuntu
            ' > ./actionlint.yaml

      - name: Run Super Linter
        id: super-linter
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_WORKSPACE: "./wp-content/"
          LINTER_RULES_PATH: /
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_CSS: true
          CSS_FILE_NAME: .stylelintrc
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JAVASCRIPT_STANDARD: true
          VALIDATE_JSON: true
          VALIDATE_PHP: true
          VALIDATE_PHP_BUILTIN: true
          VALIDATE_GITHUB_ACTIONS: true
          LOG_LEVEL: ERROR
          CREATE_LOG_FILE: true
          LOG_FILE: super-linter.log
          IGNORE_GENERATED_FILES: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IGNORE_GITIGNORED_FILES: true
          FILTER_REGEX_EXCLUDE: "(^|/)wp-(admin|includes)/|(^|/)wp-content/plugins/(akismet|twenty-)|(^|/)wp-content/themes/(twenty|twenty-)"
          GITHUB_ACTIONS_COMMAND_ARGS: -shellcheck= -pyflakes=
          # DEFAULT_BRANCH: main
          # Turn off PHP_CodeSniffer, we only want to return FATAL errors and not code styling, uncomment for strict code structure checks
          # VALIDATE_PHP_PHPCS: true
          # GITHUB_ACTIONS_COMMAND_ARGS: -ignore 'label ".+" is unknown'


      - name: Write errors to workflow job summary
        if: failure()
        run: |
          echo $GITHUB_STEP_SUMMARY
          SUMMARY=$'# Deployment Summary:\n\n```\n${{ steps.super-linter.outputs.result }}\n```\n'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      # Parse Super Linter output
      - name: Parse Super Linter output
        if: failure()
        run: |
            errors=$(echo "${{ steps.super-linter.outputs.result }}" | jq '.errors[] | {file: .filePath, line: .lineNumber, message: .message}')
            echo "{errors}=$errors" >> $GITHUB_STEP_SUMMARY

      # Setup Deployment SSH Key
      - name: Setup Deployment SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Check for uncommitted changes
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.REMOTE_WEB_ROOT }} && git status -s" > git-status.txt
          if [[ -s git-status.txt ]]; then
            echo "There are uncommitted changes on server ${{ secrets.SSH_HOST }} within the directrory ${{ secrets.REMOTE_WEB_ROOT }}. Aborting deployment."
            exit 1
          fi

      - name: Deploy to production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          ssh -i~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.REMOTE_WEB_ROOT }} && git pull origin main"

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Production Deployment Complete :rocket:!\n============================\nGitHub Action build result: `${{ job.status }}`\nTriggered by: `${{ github.triggering_actor }}`\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}


      # - name: Deploy to Production
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #   run: |
      #     ssh -i <(echo "$SSH_PRIVATE_KEY") -o StrictHostKeyChecking=no <username>@<hostname> "cd <path/to/wordpress> && wp core update --path=<path/to/wordpress>"

      # - name: Run a multi-line script
      # run: |
      #   echo Add other actions to build,
      #   echo test, and deploy your project.

      # - name: Notify Slack
      #   env:
      #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   run: |
      #       curl -X POST -H 'Content-type: application/json' --data '{"text":"A new push has been made to the main branch!"}' $SLACK_WEBHOOK_URL


            # - name: Install WP CLI
      #   run: curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && chmod +x wp-cli.phar && mv wp-cli.phar /usr/local/bin/wp && wp --info

      # - name: Install SSH,sshpass, PHP Codesniffer
      #   run: sudo apt-get update && sudo apt-get install openssh-client && sudo apt-get install -y sshpass && sudo apt install php-codesniffer

      # - name: Run PHP linting, Save errors to a file, and output errors. If errors exsists failed the job
      #   run: |
      #     find ./wp-content -name "*.php" -print0 | while IFS= read -r -d '' file; do
      #       php -l "$file" 2>&1 | grep -v "No syntax errors" >> /tmp/lint-errors.txt || true
      #     done
      #     cat /tmp/lint-errors.txt
      #     if grep -q 'Errors parsing' /tmp/lint-errors.txt; then
      #       echo "PHP linting failed. Found errors in the code."
      #       exit 1
      #     fi
      #     exit 0

      # - name: PHP Errors Detected! Sending Slack Notification...
      #   if: failure()
      #   run: |
      #    EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
      #    echo "PHP_ERRORS<<$EOF" >> "$GITHUB_ENV"
      #    echo "\`\`\`" >> "$GITHUB_ENV"
      #    cat /tmp/lint-errors.txt >> "$GITHUB_ENV"
      #    echo "\`\`\`" >> "$GITHUB_ENV"
      #    echo "$EOF" >> "$GITHUB_ENV"


      # - name: PHP Errors Detected..
      #   if: failure()
      #   run: |
      #     echo "${{ env.PHP_ERRORS }}"


      # - name: Post PHP Codesniff Failure to a Slack channel
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     # Slack channel id, channel name, or user id to post message.
      #     # See also: https://api.slack.com/methods/chat.postMessage#channels
      #     channel-id: 'C05HG205B4K'
      #     # For posting a rich message using Block Kit
      #     payload: |
      #       {
      #         "text": "PHP CodeSniffer found coding standard violations in the code",
      #         "attachments": [
      #           {
      #             "fallback": "PHP CodeSniffer report",
      #             "title": "PHP CodeSniffer report",
      #             "color": "#ff0000",
      #             "text": "```$(phpcs -n --standard=PSR12 --ignore=*/vendor/* --report=checkstyle .)```"
      #           }
      #         ]
      #       }

      # - name: Post PHP Error to Slack Channel
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     # Slack channel id, channel name, or user id to post message.
      #     # See also: https://api.slack.com/methods/chat.postMessage#channels
      #     channel-id: '${{ secrets.SLACK_CHANNEL_ID }}'
      #     # For posting a rich message using Block Kit
      #     payload: |
      #       {
      #         "attachments": [
      #           {
      #             "color": "#ff0000",
      #             "blocks": [
      #               {
      #                 "type": "header",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "PHP Lint found fatal errors in the code",
      #                   "emoji": true
      #                 }
      #               },
      #               {
      #                 "type": "section",
      #                 "text": {
      #                   "type": "mrkdwn",
      #                   "text": ${{ toJSON(env.PHP_ERRORS) }}
      #                 }
      #               },
      #               {
      #                 "type": "divider"
      #               },
      #               {
      #                 "type": "section",
      #                 "fields": [
      #                   {
      #                     "type": "mrkdwn",
      #                     "text": "*Triggered By:*\n${{ github.triggering_actor }}"
      #                   },
      #                   {
      #                     "type": "mrkdwn",
      #                     "text": "*Repo:*\n${{ github.repository	 }}"
      #                   },
      #                   {
      #                     "type": "mrkdwn",
      #                     "text": "*Deployment Event::*\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      #                   },
      #                   {
      #                     "type": "mrkdwn",
      #                     "text": "*Merge Branch:*\n${{ github.ref_name }}"
      #                   }
      #                 ]
      #               },
      #             ]
      #           }
      #         ]
      #       }
      #   env:
      #    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_API_KEY }}


      # - name: Install Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '16.x'
      # - name: Install dependencies
      #   run: |
      #     npm init
      #     npm install stylelint stylelint-config-standard
      #     npm install postcss
      #     npm install
      #     npm init stylelint

      # - name: Create .stylelintrc file
      #   run: |
      #       echo '{
      #         "extends": "@wordpress/stylelint-config",
      #         "rules": {
      #           "color-hex-case": "lower",
      #         }
      #       }' > .stylelintrc
      # - name: Lint Styling
      #   run: npx stylelint --stdin-filename "**/*.css" "**/*.scss" "**/*.less"

      # - name: Check coding standards
      #   run: |
      #     if phpcs --standard=PSR12 -n -p  --colors --extensions=php --ignore=*/vendor/* --report=json ./wp-content | jq '.totals.errors' | grep -q "0"; then
      #       echo "All PHP files conform to coding standards"
      #     else
      #       echo "Some PHP files do not conform to coding standards"
      #       exit 1
      #     fi

      # - name: Lint Styling
      #   if: failure()
      #   run: |
      #     echo "Check Linter Config Files"
      #     cat ./.stylelintrc
      #     cat ./actionlint.yaml
      #     pwd
      #     ls -la
      #     echo ${{ github.workspace }}
      #     cat ${{ github.workspace }}/super-linter.log

      # - name: Save Super Linter Errors to File
      #   run: |
      #     echo "${{ steps.super-linter.outputs.super_linter_report }}"
      #     echo "${{ toJson(steps.super-linter.outputs.super_linter_report) }}"
